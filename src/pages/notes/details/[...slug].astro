---
interface Props {
  entry: Awaited<ReturnType<typeof getCollection<"notes">>>[number];
}

import type { GetStaticPaths } from "astro";

import { getCollection } from "astro:content";
import dayjs from "dayjs";
import "github-markdown-css/github-markdown-light.css";
import "~/assets/styles/markdown.scss";

import Layout from "~/layouts/Layout.astro";

export const getStaticPaths: GetStaticPaths = async () => {
  const allNotes = await getCollection("notes");

  return allNotes.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
};

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<Layout>
  <div class="mb-8 mt-4 border-b border-dotted border-[#000] pb-4">
    <h1 class="mb-4 text-2xl font-bold">{entry.data.title}</h1>
    <ul class="flex text-sm italic text-secondary">
      <li class="mr-4">Author: {entry.data.author}</li>
      <li class="mr-4">
        CreatedAt:
        <time datetime={entry.data.createdAt.toISOString()} class="mr-2">
          {dayjs(entry.data.createdAt).format("YYYY-MM-DD HH:mm")}
        </time>
      </li>
      <li>
        UpdatedAt:
        <time datetime={entry.data.createdAt.toISOString()} class="mr-2">
          {dayjs(entry.data.createdAt).format("YYYY-MM-DD HH:mm")}
        </time>
      </li>
    </ul>
  </div>

  <article class="markdown-body !bg-transparent">
    <Content />
  </article>

  {
    entry.data.demo && (
      <div class="my-2">
        <span>ðŸ‘‰</span>
        <a
          href={entry.data.demo}
          target="_blank"
          class="text-lg text-[#59B4C3] underline"
        >
          Demo
        </a>
      </div>
    )
  }
</Layout>
