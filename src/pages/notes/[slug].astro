---
import type { GetStaticPaths } from "astro";
import type { MarkdownFileInfo } from "~/types/markdown";

import dayjs from "dayjs";

import Layout from "~/layouts/Layout.astro";

interface Props {
  notes: MarkdownFileInfo[];
}

export const getStaticPaths: GetStaticPaths = async () => {
  const slugList = ["all", "threejs"];
  const allNotes = (
    await Astro.glob<MarkdownFileInfo["frontmatter"]>("../notes/**/*.md")
  ).sort(
    (a, b) =>
      new Date(a.frontmatter.createdAt).getTime() -
      new Date(b.frontmatter.createdAt).getTime(),
  );

  return slugList.map((slug) => {
    const notes = allNotes.filter((item) => item.file.includes(slug));

    return {
      params: { slug },
      props: { notes: notes.length ? notes : allNotes },
    };
  });
};

const { notes } = Astro.props;
---

<Layout>
  <ul class="w-full">
    {
      notes &&
        notes.map(({ url, frontmatter }) => (
          <li class="mb-4 border-b border-dashed border-primary pb-4">
            <a href={url}>
              <h4 class="mb-6 text-2xl font-bold">{frontmatter.title}</h4>
              <p class="mb-4">Author: {frontmatter.author}</p>
              <p class="mb-2 text-sm text-secondary">
                {frontmatter.description}
              </p>
              <div class="mb-4 text-sm text-secondary">
                <time datetime={frontmatter.createdAt} class="mr-2">
                  {dayjs(frontmatter.createdAt).format("YYYY-MM-DD HH:mm")}
                </time>
                <time datetime={frontmatter.updatedAt}>
                  [UpdatedAt:{" "}
                  {dayjs(frontmatter.updatedAt).format("YYYY-MM-DD HH:mm")}]
                </time>
              </div>
              <ul class="flex flex-wrap text-sm italic text-[#CD505A]">
                {frontmatter.tags.map((tag) => (
                  <li class="mr-2">#{tag}</li>
                ))}
              </ul>
            </a>
          </li>
        ))
    }
  </ul>
</Layout>
